{"version":3,"sources":["assets/logo.svg","pages/Home/index.tsx","services/api.ts","components/Dropzone/index.tsx","pages/CreatePoint/index.tsx","routes.tsx","App.tsx","index.tsx"],"names":["module","exports","Home","id","className","src","logo","alt","to","api","axios","create","baseURL","Dropzone","onFileUploaded","useState","selecteFileUrl","setSelectedFileUrl","onDrop","useCallback","acceptedFiles","file","fileUrl","URL","createObjectURL","useDropzone","accept","getRootProps","getInputProps","isDragActive","CreatePoint","items","setItems","ufs","setUfs","cities","setCities","selectedUf","setSelectedUf","selectedFile","setSelectedFile","selectedCity","setSelectedCity","initialPosition","SetInitialPosition","selectedPosition","setSelectedPosition","selectedItems","setSelectedItems","name","email","whatsapp","formData","setFormData","history","useHistory","handleInputChance","event","target","value","a","preventDefault","uf","city","latitude","longitude","data","FormData","append","String","join","post","alert","push","useEffect","get","then","response","navigator","geolocation","getCurrentPosition","position","coords","ufInitials","map","sigla","cityNames","nome","onSubmit","htmlFor","type","onChange","Map","center","zoom","onClick","latlng","lat","lng","TileLayer","attribution","url","Marker","key","item","findIndex","filteredItems","filter","handleSelectItem","includes","image_url","title","Routes","component","path","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e478fb02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.26434f1f.svg\";","import React from 'react';\r\nimport './styles.css'\r\nimport logo from '../../assets/logo.svg';\r\nimport { FiLogIn } from 'react-icons/fi'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div id=\"page-home\">\r\n            <div className=\"content\">\r\n                <header>\r\n                    <img src={logo} alt=\"Ecoleta\"/>\r\n                </header>\r\n                <main>\r\n                    <h1>Seu marketplace de coleta de res√≠duos.</h1>\r\n                    <p>Ajudamos pessoas a encontrarem pontos de coleta de forma eficiente.</p>\r\n                    <Link to=\"/create-point\">\r\n                        <span>\r\n                            <FiLogIn/>\r\n                        </span>\r\n                        <strong>Cadastre um ponto de coleta</strong>\r\n                    </Link>\r\n                </main>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'http://localhost:3333'\r\n});\r\n\r\nexport default api;","import React, {useCallback, useState} from 'react';\r\nimport './styles.css';\r\nimport {useDropzone} from 'react-dropzone';\r\nimport {FiUpload} from 'react-icons/fi';\r\n\r\ninterface Props{\r\n    onFileUploaded:(file:File) => void;\r\n}\r\n\r\nconst Dropzone: React.FC<Props> = ({onFileUploaded}) => {\r\n  \r\n    const [selecteFileUrl,setSelectedFileUrl] = useState('');\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        const file = acceptedFiles[0];\r\n        const fileUrl = URL.createObjectURL(file);\r\n        setSelectedFileUrl(fileUrl);\r\n        onFileUploaded(file);\r\n    }, [onFileUploaded])\r\n\r\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({\r\n        onDrop,\r\n        accept: 'image/*'\r\n        })\r\n\r\n    return (\r\n        <div className=\"dropzone\" {...getRootProps()}>\r\n        <input {...getInputProps()} accept=\"image/*\" />\r\n        \r\n            {selecteFileUrl\r\n                ? <img src={selecteFileUrl} alt=\"\"/>\r\n                : (\r\n                    isDragActive ?\r\n                    <p>Solte a imagem aqui ...</p> :\r\n                    <p> <FiUpload/> Insira a imagem do estabelecimento.</p>\r\n                )\r\n            }\r\n        \r\n        </div>\r\n    )\r\n    }\r\n\r\nexport default Dropzone;","import React , {useEffect, useState, ChangeEvent, FormEvent} from 'react';\r\nimport './styles.css';\r\nimport logo from '../../assets/logo.svg';\r\nimport {Link,useHistory} from 'react-router-dom';\r\nimport {FiArrowLeft} from 'react-icons/fi';\r\nimport { Map, TileLayer, Marker } from 'react-leaflet';\r\nimport api from '../../services/api';\r\nimport axios from 'axios';\r\nimport {LeafletMouseEvent} from 'leaflet';\r\nimport Dropzone from '../../components/Dropzone';\r\n\r\n// array ou objeto: manualmente informar o tipo - usa interface\r\n\r\ninterface Item {\r\n    id: number;\r\n    title: string;\r\n    image_url: string;\r\n}\r\n\r\ninterface IBGEUFResponse{\r\n    sigla:string;\r\n}\r\n\r\ninterface IBGECITYResponse{\r\n    nome:string;\r\n}\r\n\r\nconst CreatePoint = () => {\r\n\r\n    const [items, setItems] = useState<Item[]>([]);\r\n    const [ufs, setUfs] = useState<string[]>([]);\r\n    const [cities, setCities] = useState<string[]>([]);\r\n    const [selectedUf, setSelectedUf] = useState('0');\r\n    const [selectedFile,setSelectedFile] = useState<File>();\r\n    const [selectedCity, setSelectedCity] = useState('0');\r\n    const [initialPosition, SetInitialPosition] = useState<[number,number]>([0,0]);\r\n    const [selectedPosition, setSelectedPosition] = useState<[number,number]>([0,0]);\r\n    const [selectedItems, setSelectedItems] = useState<number[]>([]);\r\n    const [formData,setFormData] = useState({\r\n        name: '',\r\n        email: '',\r\n        whatsapp: ''\r\n    });\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        api.get('items').then(response => {\r\n            setItems(response.data);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n            const {latitude, longitude} = position.coords;\r\n            SetInitialPosition([latitude,longitude]);\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        axios.get<IBGEUFResponse[]>('https://servicodados.ibge.gov.br/api/v1/localidades/estados').then(response => {\r\n            const ufInitials = response.data.map(uf => uf.sigla);\r\n            setUfs(ufInitials);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        //carregar as cidades sempre que a uf mudar\r\n        if(selectedUf === '0'){\r\n            return;\r\n        }\r\n        axios.get<IBGECITYResponse[]>(`https://servicodados.ibge.gov.br/api/v1/localidades/estados/${selectedUf}/municipios`).then(response => {\r\n            const cityNames = response.data.map(city => city.nome);\r\n            setCities(cityNames);\r\n        });\r\n    }, [selectedUf]);\r\n\r\n    function handleSelectUf(event: ChangeEvent<HTMLSelectElement>){\r\n       const uf = event.target.value;\r\n       setSelectedUf(uf);\r\n    }\r\n\r\n    function handleSelectCity(event: ChangeEvent<HTMLSelectElement>){\r\n       const city = event.target.value;\r\n       setSelectedCity(city);\r\n    }\r\n\r\n    function handleMapClick(event: LeafletMouseEvent){\r\n        setSelectedPosition([event.latlng.lat,event.latlng.lng]);\r\n    }\r\n\r\n    function handleInputChance(event: ChangeEvent<HTMLInputElement>){\r\n        const {name,value} = event.target;\r\n        setFormData({ ...formData, [name]: value});\r\n    }\r\n\r\n    function handleSelectItem(id: number){\r\n        const alreadySelected = selectedItems.findIndex(item => item === id);\r\n        if(alreadySelected >= 0){\r\n            const filteredItems = selectedItems.filter(item => item !== id);\r\n            setSelectedItems(filteredItems);\r\n        }else{\r\n            setSelectedItems([...selectedItems, id]);\r\n        }\r\n    }\r\n\r\n    async function handleSubmit(event: FormEvent){\r\n        event.preventDefault();\r\n\r\n\r\n\r\n        const {name,email,whatsapp} = formData;\r\n        const uf = selectedUf;\r\n        const city = selectedCity;\r\n        const [latitude,longitude] = selectedPosition;\r\n        const items = selectedItems;\r\n\r\n        const data = new FormData();\r\n\r\n        data.append('name',name);\r\n        data.append('email',email);\r\n        data.append('whatsapp',whatsapp);\r\n        data.append('uf',uf);\r\n        data.append('city',city);\r\n        data.append('latitude',String(latitude));\r\n        data.append('longitude',String(longitude));\r\n        data.append('items',items.join(','));\r\n\r\n        if(selectedFile){\r\n            data.append('image',selectedFile);\r\n        }\r\n\r\n        await api.post('points',data);\r\n\r\n        alert('Cadastro concluido com sucesso');\r\n\r\n        history.push('/');\r\n\r\n    }\r\n\r\n    return (\r\n        <div id=\"page-create-point\">\r\n            <header>\r\n                <img src={logo} alt=\"Ecoleta\"/>\r\n\r\n                <Link to=\"/\">\r\n                    <FiArrowLeft/>\r\n                    Voltar para home\r\n                </Link>\r\n            </header>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <h1>Cadastro do <br/> ponto de coleta</h1>\r\n\r\n                <Dropzone onFileUploaded={setSelectedFile}/>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Dados</h2>\r\n                    </legend>\r\n                    <div className=\"field\">\r\n                        <label htmlFor=\"name\">Nome da entidade</label>\r\n                        <input \r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        id=\"name\"\r\n                        onChange={handleInputChance}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"email\">E-mail</label>\r\n                            <input \r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            id=\"email\"\r\n                            onChange={handleInputChance}\r\n                            />\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"whatsapp\">Whatsapp</label>\r\n                            <input \r\n                            type=\"text\"\r\n                            name=\"whatsapp\"\r\n                            id=\"whatsapp\"\r\n                            onChange={handleInputChance}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>Endere√ßo</h2>\r\n                        <span>Selecione o endere√ßo no mapa</span>\r\n                    </legend>\r\n\r\n                    <Map center={initialPosition} zoom={15} onClick={handleMapClick}>\r\n                        <TileLayer \r\n                            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"/>\r\n\r\n                        <Marker position={selectedPosition} zoom={15}/>\r\n                    </Map>\r\n\r\n                    <div className=\"field-group\">\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"uf\">Estado (UF)</label>\r\n                            <select \r\n                                name=\"uf\" \r\n                                id=\"uf\" \r\n                                value={selectedUf} \r\n                                onChange={handleSelectUf}>\r\n                                    <option value=\"0\">Selecione uma UF</option>\r\n                                    {ufs.map(uf => (\r\n                                         <option key={uf} value={uf}>{uf}</option>\r\n                                    ))}\r\n                            </select>\r\n                        </div>\r\n                        <div className=\"field\">\r\n                            <label htmlFor=\"city\">Cidade</label>\r\n                            <select \r\n                            name=\"city\"\r\n                            value={selectedCity}\r\n                            onChange={handleSelectCity}\r\n                            id=\"city\">\r\n                                <option value=\"0\">Selecione uma cidade</option>\r\n                                {cities.map(city => (\r\n                                    <option key={city} value={city}>{city}</option>\r\n                               ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                </fieldset>\r\n\r\n                <fieldset>\r\n                    <legend>\r\n                        <h2>√çtens de coleta</h2>\r\n                        <span>Selecione um ou mais √≠tens abaixo</span>\r\n                    </legend>\r\n\r\n                    <ul className=\"items-grid\">\r\n                        {items.map(item => (\r\n                            <li \r\n                            key={item.id} \r\n                            onClick={() => handleSelectItem(item.id)}\r\n                            className={selectedItems.includes(item.id) ? 'selected' : ''}\r\n                            >\r\n                                <img src={item.image_url} alt={item.title}/>\r\n                                <span>{item.title}</span>\r\n                            </li>\r\n                        ))}\r\n                        \r\n                    </ul>\r\n                </fieldset>\r\n\r\n                <button type=\"submit\">\r\n                    Cadastrar ponto de coleta\r\n                </button>\r\n\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreatePoint;","import {Route,BrowserRouter} from 'react-router-dom';\r\nimport React from 'react';\r\nimport Home from './pages/Home';\r\nimport CreatePoint from './pages/CreatePoint';\r\n\r\nconst Routes = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Route component={Home} path=\"/\" exact/>\r\n            <Route component={CreatePoint} path=\"/create-point\"/>\r\n        </BrowserRouter>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from 'react';\r\nimport './App.css';\r\nimport Routes from './routes';\r\n\r\nfunction App() {\r\n  return (\r\n     <Routes/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}